// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: basic.proto
#ifndef GRPC_basic_2eproto__INCLUDED
#define GRPC_basic_2eproto__INCLUDED

#include "basic.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class BasicService final {
 public:
  static constexpr char const* service_full_name() {
    return "BasicService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status InferenceItem(::grpc::ClientContext* context, const ::RequestItem& request, ::ItemResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ItemResult>> AsyncInferenceItem(::grpc::ClientContext* context, const ::RequestItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ItemResult>>(AsyncInferenceItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ItemResult>> PrepareAsyncInferenceItem(::grpc::ClientContext* context, const ::RequestItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ItemResult>>(PrepareAsyncInferenceItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::RequestItem, ::ItemResult>> StreamInferenceItem(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::RequestItem, ::ItemResult>>(StreamInferenceItemRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::RequestItem, ::ItemResult>> AsyncStreamInferenceItem(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::RequestItem, ::ItemResult>>(AsyncStreamInferenceItemRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::RequestItem, ::ItemResult>> PrepareAsyncStreamInferenceItem(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::RequestItem, ::ItemResult>>(PrepareAsyncStreamInferenceItemRaw(context, cq));
    }
    virtual ::grpc::Status ChangeThreads(::grpc::ClientContext* context, const ::ThreadRequest& request, ::ThreadReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ThreadReply>> AsyncChangeThreads(::grpc::ClientContext* context, const ::ThreadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ThreadReply>>(AsyncChangeThreadsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ThreadReply>> PrepareAsyncChangeThreads(::grpc::ClientContext* context, const ::ThreadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ThreadReply>>(PrepareAsyncChangeThreadsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void InferenceItem(::grpc::ClientContext* context, const ::RequestItem* request, ::ItemResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InferenceItem(::grpc::ClientContext* context, const ::RequestItem* request, ::ItemResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StreamInferenceItem(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::RequestItem,::ItemResult>* reactor) = 0;
      virtual void ChangeThreads(::grpc::ClientContext* context, const ::ThreadRequest* request, ::ThreadReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ChangeThreads(::grpc::ClientContext* context, const ::ThreadRequest* request, ::ThreadReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ItemResult>* AsyncInferenceItemRaw(::grpc::ClientContext* context, const ::RequestItem& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ItemResult>* PrepareAsyncInferenceItemRaw(::grpc::ClientContext* context, const ::RequestItem& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::RequestItem, ::ItemResult>* StreamInferenceItemRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::RequestItem, ::ItemResult>* AsyncStreamInferenceItemRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::RequestItem, ::ItemResult>* PrepareAsyncStreamInferenceItemRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ThreadReply>* AsyncChangeThreadsRaw(::grpc::ClientContext* context, const ::ThreadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ThreadReply>* PrepareAsyncChangeThreadsRaw(::grpc::ClientContext* context, const ::ThreadRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status InferenceItem(::grpc::ClientContext* context, const ::RequestItem& request, ::ItemResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ItemResult>> AsyncInferenceItem(::grpc::ClientContext* context, const ::RequestItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ItemResult>>(AsyncInferenceItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ItemResult>> PrepareAsyncInferenceItem(::grpc::ClientContext* context, const ::RequestItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ItemResult>>(PrepareAsyncInferenceItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::RequestItem, ::ItemResult>> StreamInferenceItem(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::RequestItem, ::ItemResult>>(StreamInferenceItemRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::RequestItem, ::ItemResult>> AsyncStreamInferenceItem(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::RequestItem, ::ItemResult>>(AsyncStreamInferenceItemRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::RequestItem, ::ItemResult>> PrepareAsyncStreamInferenceItem(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::RequestItem, ::ItemResult>>(PrepareAsyncStreamInferenceItemRaw(context, cq));
    }
    ::grpc::Status ChangeThreads(::grpc::ClientContext* context, const ::ThreadRequest& request, ::ThreadReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ThreadReply>> AsyncChangeThreads(::grpc::ClientContext* context, const ::ThreadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ThreadReply>>(AsyncChangeThreadsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ThreadReply>> PrepareAsyncChangeThreads(::grpc::ClientContext* context, const ::ThreadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ThreadReply>>(PrepareAsyncChangeThreadsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void InferenceItem(::grpc::ClientContext* context, const ::RequestItem* request, ::ItemResult* response, std::function<void(::grpc::Status)>) override;
      void InferenceItem(::grpc::ClientContext* context, const ::RequestItem* request, ::ItemResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamInferenceItem(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::RequestItem,::ItemResult>* reactor) override;
      void ChangeThreads(::grpc::ClientContext* context, const ::ThreadRequest* request, ::ThreadReply* response, std::function<void(::grpc::Status)>) override;
      void ChangeThreads(::grpc::ClientContext* context, const ::ThreadRequest* request, ::ThreadReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ItemResult>* AsyncInferenceItemRaw(::grpc::ClientContext* context, const ::RequestItem& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ItemResult>* PrepareAsyncInferenceItemRaw(::grpc::ClientContext* context, const ::RequestItem& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::RequestItem, ::ItemResult>* StreamInferenceItemRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::RequestItem, ::ItemResult>* AsyncStreamInferenceItemRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::RequestItem, ::ItemResult>* PrepareAsyncStreamInferenceItemRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ThreadReply>* AsyncChangeThreadsRaw(::grpc::ClientContext* context, const ::ThreadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ThreadReply>* PrepareAsyncChangeThreadsRaw(::grpc::ClientContext* context, const ::ThreadRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_InferenceItem_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamInferenceItem_;
    const ::grpc::internal::RpcMethod rpcmethod_ChangeThreads_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status InferenceItem(::grpc::ServerContext* context, const ::RequestItem* request, ::ItemResult* response);
    virtual ::grpc::Status StreamInferenceItem(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::ItemResult, ::RequestItem>* stream);
    virtual ::grpc::Status ChangeThreads(::grpc::ServerContext* context, const ::ThreadRequest* request, ::ThreadReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_InferenceItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InferenceItem() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_InferenceItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InferenceItem(::grpc::ServerContext* /*context*/, const ::RequestItem* /*request*/, ::ItemResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInferenceItem(::grpc::ServerContext* context, ::RequestItem* request, ::grpc::ServerAsyncResponseWriter< ::ItemResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamInferenceItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamInferenceItem() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StreamInferenceItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamInferenceItem(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ItemResult, ::RequestItem>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamInferenceItem(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::ItemResult, ::RequestItem>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ChangeThreads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ChangeThreads() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ChangeThreads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeThreads(::grpc::ServerContext* /*context*/, const ::ThreadRequest* /*request*/, ::ThreadReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeThreads(::grpc::ServerContext* context, ::ThreadRequest* request, ::grpc::ServerAsyncResponseWriter< ::ThreadReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_InferenceItem<WithAsyncMethod_StreamInferenceItem<WithAsyncMethod_ChangeThreads<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_InferenceItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InferenceItem() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::RequestItem, ::ItemResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::RequestItem* request, ::ItemResult* response) { return this->InferenceItem(context, request, response); }));}
    void SetMessageAllocatorFor_InferenceItem(
        ::grpc::MessageAllocator< ::RequestItem, ::ItemResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::RequestItem, ::ItemResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InferenceItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InferenceItem(::grpc::ServerContext* /*context*/, const ::RequestItem* /*request*/, ::ItemResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InferenceItem(
      ::grpc::CallbackServerContext* /*context*/, const ::RequestItem* /*request*/, ::ItemResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamInferenceItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamInferenceItem() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::RequestItem, ::ItemResult>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->StreamInferenceItem(context); }));
    }
    ~WithCallbackMethod_StreamInferenceItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamInferenceItem(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ItemResult, ::RequestItem>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::RequestItem, ::ItemResult>* StreamInferenceItem(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ChangeThreads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ChangeThreads() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ThreadRequest, ::ThreadReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ThreadRequest* request, ::ThreadReply* response) { return this->ChangeThreads(context, request, response); }));}
    void SetMessageAllocatorFor_ChangeThreads(
        ::grpc::MessageAllocator< ::ThreadRequest, ::ThreadReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ThreadRequest, ::ThreadReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ChangeThreads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeThreads(::grpc::ServerContext* /*context*/, const ::ThreadRequest* /*request*/, ::ThreadReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ChangeThreads(
      ::grpc::CallbackServerContext* /*context*/, const ::ThreadRequest* /*request*/, ::ThreadReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_InferenceItem<WithCallbackMethod_StreamInferenceItem<WithCallbackMethod_ChangeThreads<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_InferenceItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InferenceItem() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_InferenceItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InferenceItem(::grpc::ServerContext* /*context*/, const ::RequestItem* /*request*/, ::ItemResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamInferenceItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamInferenceItem() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StreamInferenceItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamInferenceItem(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ItemResult, ::RequestItem>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ChangeThreads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ChangeThreads() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ChangeThreads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeThreads(::grpc::ServerContext* /*context*/, const ::ThreadRequest* /*request*/, ::ThreadReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_InferenceItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InferenceItem() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_InferenceItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InferenceItem(::grpc::ServerContext* /*context*/, const ::RequestItem* /*request*/, ::ItemResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInferenceItem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamInferenceItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamInferenceItem() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StreamInferenceItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamInferenceItem(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ItemResult, ::RequestItem>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamInferenceItem(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ChangeThreads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ChangeThreads() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ChangeThreads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeThreads(::grpc::ServerContext* /*context*/, const ::ThreadRequest* /*request*/, ::ThreadReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeThreads(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InferenceItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InferenceItem() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InferenceItem(context, request, response); }));
    }
    ~WithRawCallbackMethod_InferenceItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InferenceItem(::grpc::ServerContext* /*context*/, const ::RequestItem* /*request*/, ::ItemResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InferenceItem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamInferenceItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamInferenceItem() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->StreamInferenceItem(context); }));
    }
    ~WithRawCallbackMethod_StreamInferenceItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamInferenceItem(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ItemResult, ::RequestItem>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* StreamInferenceItem(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ChangeThreads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ChangeThreads() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ChangeThreads(context, request, response); }));
    }
    ~WithRawCallbackMethod_ChangeThreads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeThreads(::grpc::ServerContext* /*context*/, const ::ThreadRequest* /*request*/, ::ThreadReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ChangeThreads(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InferenceItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InferenceItem() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::RequestItem, ::ItemResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::RequestItem, ::ItemResult>* streamer) {
                       return this->StreamedInferenceItem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InferenceItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InferenceItem(::grpc::ServerContext* /*context*/, const ::RequestItem* /*request*/, ::ItemResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInferenceItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RequestItem,::ItemResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ChangeThreads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ChangeThreads() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ThreadRequest, ::ThreadReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ThreadRequest, ::ThreadReply>* streamer) {
                       return this->StreamedChangeThreads(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ChangeThreads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ChangeThreads(::grpc::ServerContext* /*context*/, const ::ThreadRequest* /*request*/, ::ThreadReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedChangeThreads(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ThreadRequest,::ThreadReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_InferenceItem<WithStreamedUnaryMethod_ChangeThreads<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_InferenceItem<WithStreamedUnaryMethod_ChangeThreads<Service > > StreamedService;
};


#endif  // GRPC_basic_2eproto__INCLUDED
